'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.9148
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dts_liquidos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dts_liquidos
    Inherits Global.System.Data.DataSet
    
    Private tableliquidos As liquidosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("liquidos")) Is Nothing) Then
                MyBase.Tables.Add(New liquidosDataTable(ds.Tables("liquidos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property liquidos() As liquidosDataTable
        Get
            Return Me.tableliquidos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dts_liquidos = CType(MyBase.Clone,dts_liquidos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("liquidos")) Is Nothing) Then
                MyBase.Tables.Add(New liquidosDataTable(ds.Tables("liquidos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableliquidos = CType(MyBase.Tables("liquidos"),liquidosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableliquidos) Is Nothing) Then
                Me.tableliquidos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dts_liquidos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dts_liquidos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableliquidos = New liquidosDataTable
        MyBase.Tables.Add(Me.tableliquidos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeliquidos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dts_liquidos = New dts_liquidos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub liquidosRowChangeEventHandler(ByVal sender As Object, ByVal e As liquidosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class liquidosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGLU As Global.System.Data.DataColumn
        
        Private columnPT As Global.System.Data.DataColumn
        
        Private columnLDH As Global.System.Data.DataColumn
        
        Private columnVDRL As Global.System.Data.DataColumn
        
        Private columnBAC As Global.System.Data.DataColumn
        
        Private columnHEM As Global.System.Data.DataColumn
        
        Private columnCIT As Global.System.Data.DataColumn
        
        Private columnPEDIDO As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnPACIENTE As Global.System.Data.DataColumn
        
        Private columnTURNO As Global.System.Data.DataColumn
        
        Private columnGRADO As Global.System.Data.DataColumn
        
        Private columnPARENTESCO As Global.System.Data.DataColumn
        
        Private columnHC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "liquidos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LDHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLDH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VDRLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVDRL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PEDIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPEDIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PACIENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPACIENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TURNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTURNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GRADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PARENTESCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENTESCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As liquidosRow
            Get
                Return CType(Me.Rows(index),liquidosRow)
            End Get
        End Property
        
        Public Event liquidosRowChanging As liquidosRowChangeEventHandler
        
        Public Event liquidosRowChanged As liquidosRowChangeEventHandler
        
        Public Event liquidosRowDeleting As liquidosRowChangeEventHandler
        
        Public Event liquidosRowDeleted As liquidosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddliquidosRow(ByVal row As liquidosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddliquidosRow(ByVal GLU As String, ByVal PT As String, ByVal LDH As String, ByVal VDRL As String, ByVal BAC As String, ByVal HEM As String, ByVal CIT As String, ByVal PEDIDO As Integer, ByVal FECHA As Date, ByVal PACIENTE As String, ByVal TURNO As Integer, ByVal GRADO As String, ByVal PARENTESCO As String, ByVal HC As String) As liquidosRow
            Dim rowliquidosRow As liquidosRow = CType(Me.NewRow,liquidosRow)
            Dim columnValuesArray() As Object = New Object() {GLU, PT, LDH, VDRL, BAC, HEM, CIT, PEDIDO, FECHA, PACIENTE, TURNO, GRADO, PARENTESCO, HC}
            rowliquidosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowliquidosRow)
            Return rowliquidosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As liquidosDataTable = CType(MyBase.Clone,liquidosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New liquidosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGLU = MyBase.Columns("GLU")
            Me.columnPT = MyBase.Columns("PT")
            Me.columnLDH = MyBase.Columns("LDH")
            Me.columnVDRL = MyBase.Columns("VDRL")
            Me.columnBAC = MyBase.Columns("BAC")
            Me.columnHEM = MyBase.Columns("HEM")
            Me.columnCIT = MyBase.Columns("CIT")
            Me.columnPEDIDO = MyBase.Columns("PEDIDO")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnPACIENTE = MyBase.Columns("PACIENTE")
            Me.columnTURNO = MyBase.Columns("TURNO")
            Me.columnGRADO = MyBase.Columns("GRADO")
            Me.columnPARENTESCO = MyBase.Columns("PARENTESCO")
            Me.columnHC = MyBase.Columns("HC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGLU = New Global.System.Data.DataColumn("GLU", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnGLU)
            Me.columnPT = New Global.System.Data.DataColumn("PT", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnPT)
            Me.columnLDH = New Global.System.Data.DataColumn("LDH", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnLDH)
            Me.columnVDRL = New Global.System.Data.DataColumn("VDRL", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnVDRL)
            Me.columnBAC = New Global.System.Data.DataColumn("BAC", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnBAC)
            Me.columnHEM = New Global.System.Data.DataColumn("HEM", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnHEM)
            Me.columnCIT = New Global.System.Data.DataColumn("CIT", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnCIT)
            Me.columnPEDIDO = New Global.System.Data.DataColumn("PEDIDO", GetType(Integer), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnPEDIDO)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnPACIENTE = New Global.System.Data.DataColumn("PACIENTE", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnPACIENTE)
            Me.columnTURNO = New Global.System.Data.DataColumn("TURNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnTURNO)
            Me.columnGRADO = New Global.System.Data.DataColumn("GRADO", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnGRADO)
            Me.columnPARENTESCO = New Global.System.Data.DataColumn("PARENTESCO", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnPARENTESCO)
            Me.columnHC = New Global.System.Data.DataColumn("HC", GetType(String), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnHC)
            Me.columnGLU.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnPT.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnLDH.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnVDRL.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnBAC.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnHEM.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnCIT.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnPEDIDO.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnFECHA.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnPACIENTE.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnTURNO.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnGRADO.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnPARENTESCO.Namespace = "http://tempuri.org/dts_liquidos.xsd"
            Me.columnHC.Namespace = "http://tempuri.org/dts_liquidos.xsd"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewliquidosRow() As liquidosRow
            Return CType(Me.NewRow,liquidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New liquidosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(liquidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.liquidosRowChangedEvent) Is Nothing) Then
                RaiseEvent liquidosRowChanged(Me, New liquidosRowChangeEvent(CType(e.Row,liquidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.liquidosRowChangingEvent) Is Nothing) Then
                RaiseEvent liquidosRowChanging(Me, New liquidosRowChangeEvent(CType(e.Row,liquidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.liquidosRowDeletedEvent) Is Nothing) Then
                RaiseEvent liquidosRowDeleted(Me, New liquidosRowChangeEvent(CType(e.Row,liquidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.liquidosRowDeletingEvent) Is Nothing) Then
                RaiseEvent liquidosRowDeleting(Me, New liquidosRowChangeEvent(CType(e.Row,liquidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveliquidosRow(ByVal row As liquidosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dts_liquidos = New dts_liquidos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "liquidosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class liquidosRow
        Inherits Global.System.Data.DataRow
        
        Private tableliquidos As liquidosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableliquidos = CType(Me.Table,liquidosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLU() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.GLUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLU' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.GLUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PT() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.PTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PT' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.PTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LDH() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.LDHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LDH' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.LDHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VDRL() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.VDRLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VDRL' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.VDRLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BAC() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.BACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BAC' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.BACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEM() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.HEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HEM' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.HEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.CITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIT' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.CITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PEDIDO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.PEDIDOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PEDIDO' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.PEDIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PACIENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.PACIENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PACIENTE' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.PACIENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TURNO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.TURNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TURNO' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.TURNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GRADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.GRADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GRADO' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.GRADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PARENTESCO() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.PARENTESCOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PARENTESCO' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.PARENTESCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HC() As String
            Get
                Try 
                    Return CType(Me(Me.tableliquidos.HCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HC' de la tabla 'liquidos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableliquidos.HCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLUNull() As Boolean
            Return Me.IsNull(Me.tableliquidos.GLUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLUNull()
            Me(Me.tableliquidos.GLUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPTNull() As Boolean
            Return Me.IsNull(Me.tableliquidos.PTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPTNull()
            Me(Me.tableliquidos.PTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLDHNull() As Boolean
            Return Me.IsNull(Me.tableliquidos.LDHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLDHNull()
            Me(Me.tableliquidos.LDHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVDRLNull() As Boolean
            Return Me.IsNull(Me.tableliquidos.VDRLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVDRLNull()
            Me(Me.tableliquidos.VDRLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBACNull() As Boolean
            Return Me.IsNull(Me.tableliquidos.BACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBACNull()
            Me(Me.tableliquidos.BACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEMNull() As Boolean
            Return Me.IsNull(Me.tableliquidos.HEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEMNull()
            Me(Me.tableliquidos.HEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCITNull() As Boolean
            Return Me.IsNull(Me.tableliquidos.CITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCITNull()
            Me(Me.tableliquidos.CITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPEDIDONull() As Boolean
            Return Me.IsNull(Me.tableliquidos.PEDIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPEDIDONull()
            Me(Me.tableliquidos.PEDIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tableliquidos.FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHANull()
            Me(Me.tableliquidos.FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPACIENTENull() As Boolean
            Return Me.IsNull(Me.tableliquidos.PACIENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPACIENTENull()
            Me(Me.tableliquidos.PACIENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTURNONull() As Boolean
            Return Me.IsNull(Me.tableliquidos.TURNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTURNONull()
            Me(Me.tableliquidos.TURNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGRADONull() As Boolean
            Return Me.IsNull(Me.tableliquidos.GRADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGRADONull()
            Me(Me.tableliquidos.GRADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPARENTESCONull() As Boolean
            Return Me.IsNull(Me.tableliquidos.PARENTESCOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPARENTESCONull()
            Me(Me.tableliquidos.PARENTESCOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHCNull() As Boolean
            Return Me.IsNull(Me.tableliquidos.HCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHCNull()
            Me(Me.tableliquidos.HCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class liquidosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As liquidosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As liquidosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As liquidosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
