'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.9151
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dts_Cuentas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dts_Cuentas
    Inherits Global.System.Data.DataSet
    
    Private tableCuentas As CuentasDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Cuentas")) Is Nothing) Then
                MyBase.Tables.Add(New CuentasDataTable(ds.Tables("Cuentas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cuentas() As CuentasDataTable
        Get
            Return Me.tableCuentas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dts_Cuentas = CType(MyBase.Clone,dts_Cuentas)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Cuentas")) Is Nothing) Then
                MyBase.Tables.Add(New CuentasDataTable(ds.Tables("Cuentas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCuentas = CType(MyBase.Tables("Cuentas"),CuentasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCuentas) Is Nothing) Then
                Me.tableCuentas.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dts_Cuentas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dts_Cuentas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCuentas = New CuentasDataTable
        MyBase.Tables.Add(Me.tableCuentas)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCuentas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dts_Cuentas = New dts_Cuentas
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CuentasRowChangeEventHandler(ByVal sender As Object, ByVal e As CuentasRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CuentasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINI As Global.System.Data.DataColumn
        
        Private columnFFIN As Global.System.Data.DataColumn
        
        Private columnFAC_ID As Global.System.Data.DataColumn
        
        Private columnFAC_FECING As Global.System.Data.DataColumn
        
        Private columnFAC_TOTAL As Global.System.Data.DataColumn
        
        Private columnFAC_IVA As Global.System.Data.DataColumn
        
        Private columnFAC_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnFAC_RECARGO As Global.System.Data.DataColumn
        
        Private columnFAC_NOMBRE As Global.System.Data.DataColumn
        
        Private columnFAC_ESTATUS As Global.System.Data.DataColumn
        
        Private columnFAC_FORMAPAGO As Global.System.Data.DataColumn
        
        Private columnPED_TURNO As Global.System.Data.DataColumn
        
        Private columnABO_MONTO As Global.System.Data.DataColumn
        
        Private columnFAC_USER As Global.System.Data.DataColumn
        
        Private columnABO_SALDO As Global.System.Data.DataColumn
        
        Private columnPED_NUMAUX As Global.System.Data.DataColumn
        
        Private columnPED_TIPO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Cuentas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FFINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFFIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_IVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RECARGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RECARGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ESTATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ESTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FORMAPAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FORMAPAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PED_TURNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPED_TURNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ABO_MONTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnABO_MONTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ABO_SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnABO_SALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PED_NUMAUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPED_NUMAUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PED_TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPED_TIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CuentasRow
            Get
                Return CType(Me.Rows(index),CuentasRow)
            End Get
        End Property
        
        Public Event CuentasRowChanging As CuentasRowChangeEventHandler
        
        Public Event CuentasRowChanged As CuentasRowChangeEventHandler
        
        Public Event CuentasRowDeleting As CuentasRowChangeEventHandler
        
        Public Event CuentasRowDeleted As CuentasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCuentasRow(ByVal row As CuentasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCuentasRow( _
                    ByVal FINI As Date,  _
                    ByVal FFIN As Date,  _
                    ByVal FAC_ID As String,  _
                    ByVal FAC_FECING As Date,  _
                    ByVal FAC_TOTAL As Double,  _
                    ByVal FAC_IVA As Double,  _
                    ByVal FAC_DESCUENTO As Double,  _
                    ByVal FAC_RECARGO As Double,  _
                    ByVal FAC_NOMBRE As String,  _
                    ByVal FAC_ESTATUS As Integer,  _
                    ByVal FAC_FORMAPAGO As String,  _
                    ByVal PED_TURNO As String,  _
                    ByVal ABO_MONTO As Double,  _
                    ByVal FAC_USER As String,  _
                    ByVal ABO_SALDO As Double,  _
                    ByVal PED_NUMAUX As Integer,  _
                    ByVal PED_TIPO As String) As CuentasRow
            Dim rowCuentasRow As CuentasRow = CType(Me.NewRow,CuentasRow)
            Dim columnValuesArray() As Object = New Object() {FINI, FFIN, FAC_ID, FAC_FECING, FAC_TOTAL, FAC_IVA, FAC_DESCUENTO, FAC_RECARGO, FAC_NOMBRE, FAC_ESTATUS, FAC_FORMAPAGO, PED_TURNO, ABO_MONTO, FAC_USER, ABO_SALDO, PED_NUMAUX, PED_TIPO}
            rowCuentasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCuentasRow)
            Return rowCuentasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CuentasDataTable = CType(MyBase.Clone,CuentasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CuentasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINI = MyBase.Columns("FINI")
            Me.columnFFIN = MyBase.Columns("FFIN")
            Me.columnFAC_ID = MyBase.Columns("FAC_ID")
            Me.columnFAC_FECING = MyBase.Columns("FAC_FECING")
            Me.columnFAC_TOTAL = MyBase.Columns("FAC_TOTAL")
            Me.columnFAC_IVA = MyBase.Columns("FAC_IVA")
            Me.columnFAC_DESCUENTO = MyBase.Columns("FAC_DESCUENTO")
            Me.columnFAC_RECARGO = MyBase.Columns("FAC_RECARGO")
            Me.columnFAC_NOMBRE = MyBase.Columns("FAC_NOMBRE")
            Me.columnFAC_ESTATUS = MyBase.Columns("FAC_ESTATUS")
            Me.columnFAC_FORMAPAGO = MyBase.Columns("FAC_FORMAPAGO")
            Me.columnPED_TURNO = MyBase.Columns("PED_TURNO")
            Me.columnABO_MONTO = MyBase.Columns("ABO_MONTO")
            Me.columnFAC_USER = MyBase.Columns("FAC_USER")
            Me.columnABO_SALDO = MyBase.Columns("ABO_SALDO")
            Me.columnPED_NUMAUX = MyBase.Columns("PED_NUMAUX")
            Me.columnPED_TIPO = MyBase.Columns("PED_TIPO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINI = New Global.System.Data.DataColumn("FINI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINI)
            Me.columnFFIN = New Global.System.Data.DataColumn("FFIN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFFIN)
            Me.columnFAC_ID = New Global.System.Data.DataColumn("FAC_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ID)
            Me.columnFAC_FECING = New Global.System.Data.DataColumn("FAC_FECING", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECING)
            Me.columnFAC_TOTAL = New Global.System.Data.DataColumn("FAC_TOTAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_TOTAL)
            Me.columnFAC_IVA = New Global.System.Data.DataColumn("FAC_IVA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_IVA)
            Me.columnFAC_DESCUENTO = New Global.System.Data.DataColumn("FAC_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_DESCUENTO)
            Me.columnFAC_RECARGO = New Global.System.Data.DataColumn("FAC_RECARGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RECARGO)
            Me.columnFAC_NOMBRE = New Global.System.Data.DataColumn("FAC_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NOMBRE)
            Me.columnFAC_ESTATUS = New Global.System.Data.DataColumn("FAC_ESTATUS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ESTATUS)
            Me.columnFAC_FORMAPAGO = New Global.System.Data.DataColumn("FAC_FORMAPAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FORMAPAGO)
            Me.columnPED_TURNO = New Global.System.Data.DataColumn("PED_TURNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPED_TURNO)
            Me.columnABO_MONTO = New Global.System.Data.DataColumn("ABO_MONTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnABO_MONTO)
            Me.columnFAC_USER = New Global.System.Data.DataColumn("FAC_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_USER)
            Me.columnABO_SALDO = New Global.System.Data.DataColumn("ABO_SALDO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnABO_SALDO)
            Me.columnPED_NUMAUX = New Global.System.Data.DataColumn("PED_NUMAUX", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPED_NUMAUX)
            Me.columnPED_TIPO = New Global.System.Data.DataColumn("PED_TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPED_TIPO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCuentasRow() As CuentasRow
            Return CType(Me.NewRow,CuentasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CuentasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CuentasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CuentasRowChangedEvent) Is Nothing) Then
                RaiseEvent CuentasRowChanged(Me, New CuentasRowChangeEvent(CType(e.Row,CuentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CuentasRowChangingEvent) Is Nothing) Then
                RaiseEvent CuentasRowChanging(Me, New CuentasRowChangeEvent(CType(e.Row,CuentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CuentasRowDeletedEvent) Is Nothing) Then
                RaiseEvent CuentasRowDeleted(Me, New CuentasRowChangeEvent(CType(e.Row,CuentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CuentasRowDeletingEvent) Is Nothing) Then
                RaiseEvent CuentasRowDeleting(Me, New CuentasRowChangeEvent(CType(e.Row,CuentasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCuentasRow(ByVal row As CuentasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dts_Cuentas = New dts_Cuentas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CuentasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CuentasRow
        Inherits Global.System.Data.DataRow
        
        Private tableCuentas As CuentasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuentas = CType(Me.Table,CuentasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FINIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FINI' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FINIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FFIN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FFINColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FFIN' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FFINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ID' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECING() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_FECINGColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECING' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_FECINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_TOTAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_TOTALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_TOTAL' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_IVA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_IVAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_IVA' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_DESCUENTO' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RECARGO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_RECARGOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RECARGO' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_RECARGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NOMBRE' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ESTATUS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_ESTATUSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ESTATUS' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_ESTATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FORMAPAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_FORMAPAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FORMAPAGO' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_FORMAPAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PED_TURNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.PED_TURNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PED_TURNO' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.PED_TURNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ABO_MONTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.ABO_MONTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ABO_MONTO' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.ABO_MONTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.FAC_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_USER' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.FAC_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ABO_SALDO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.ABO_SALDOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ABO_SALDO' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.ABO_SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PED_NUMAUX() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.PED_NUMAUXColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PED_NUMAUX' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.PED_NUMAUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PED_TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCuentas.PED_TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PED_TIPO' de la tabla 'Cuentas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas.PED_TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFININull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FINIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFININull()
            Me(Me.tableCuentas.FINIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFFINNull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FFINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFFINNull()
            Me(Me.tableCuentas.FFINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_IDNull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_IDNull()
            Me(Me.tableCuentas.FAC_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECINGNull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_FECINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECINGNull()
            Me(Me.tableCuentas.FAC_FECINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_TOTALNull()
            Me(Me.tableCuentas.FAC_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_IVANull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_IVANull()
            Me(Me.tableCuentas.FAC_IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_DESCUENTONull()
            Me(Me.tableCuentas.FAC_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RECARGONull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_RECARGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RECARGONull()
            Me(Me.tableCuentas.FAC_RECARGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NOMBRENull()
            Me(Me.tableCuentas.FAC_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ESTATUSNull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_ESTATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ESTATUSNull()
            Me(Me.tableCuentas.FAC_ESTATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FORMAPAGONull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_FORMAPAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FORMAPAGONull()
            Me(Me.tableCuentas.FAC_FORMAPAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPED_TURNONull() As Boolean
            Return Me.IsNull(Me.tableCuentas.PED_TURNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPED_TURNONull()
            Me(Me.tableCuentas.PED_TURNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsABO_MONTONull() As Boolean
            Return Me.IsNull(Me.tableCuentas.ABO_MONTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetABO_MONTONull()
            Me(Me.tableCuentas.ABO_MONTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_USERNull() As Boolean
            Return Me.IsNull(Me.tableCuentas.FAC_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_USERNull()
            Me(Me.tableCuentas.FAC_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsABO_SALDONull() As Boolean
            Return Me.IsNull(Me.tableCuentas.ABO_SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetABO_SALDONull()
            Me(Me.tableCuentas.ABO_SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPED_NUMAUXNull() As Boolean
            Return Me.IsNull(Me.tableCuentas.PED_NUMAUXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPED_NUMAUXNull()
            Me(Me.tableCuentas.PED_NUMAUXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPED_TIPONull() As Boolean
            Return Me.IsNull(Me.tableCuentas.PED_TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPED_TIPONull()
            Me(Me.tableCuentas.PED_TIPOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CuentasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CuentasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CuentasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CuentasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
