'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9171
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dts_interpretacion"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dts_interpretacion
    Inherits Global.System.Data.DataSet
    
    Private tableInterpretacion As InterpretacionDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Interpretacion")) Is Nothing) Then
                MyBase.Tables.Add(New InterpretacionDataTable(ds.Tables("Interpretacion")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Interpretacion() As InterpretacionDataTable
        Get
            Return Me.tableInterpretacion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dts_interpretacion = CType(MyBase.Clone,dts_interpretacion)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Interpretacion")) Is Nothing) Then
                MyBase.Tables.Add(New InterpretacionDataTable(ds.Tables("Interpretacion")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableInterpretacion = CType(MyBase.Tables("Interpretacion"),InterpretacionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableInterpretacion) Is Nothing) Then
                Me.tableInterpretacion.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dts_interpretacion"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dts_interpretacion.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableInterpretacion = New InterpretacionDataTable
        MyBase.Tables.Add(Me.tableInterpretacion)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeInterpretacion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dts_interpretacion = New dts_interpretacion
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub InterpretacionRowChangeEventHandler(ByVal sender As Object, ByVal e As InterpretacionRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class InterpretacionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPED_ID As Global.System.Data.DataColumn
        
        Private columnPRCC_FECHA As Global.System.Data.DataColumn
        
        Private columnPRCC_HORA As Global.System.Data.DataColumn
        
        Private columnPRCC_INT_ALIMENTOS As Global.System.Data.DataColumn
        
        Private columnPRCC_INT_INHALANTES As Global.System.Data.DataColumn
        
        Private columnPRCC_INT_MED_AINES As Global.System.Data.DataColumn
        
        Private columnPRCC_INT_MED_AB As Global.System.Data.DataColumn
        
        Private columnPRCC_INT_MED_OTRAS As Global.System.Data.DataColumn
        
        Private columnPRCC_INT_RECOMEN1 As Global.System.Data.DataColumn
        
        Private columnPRCC_INT_RECOMEN2 As Global.System.Data.DataColumn
        
        Private columnPRCC_INT_SUSTANCIAS As Global.System.Data.DataColumn
        
        Private columnLIS_USER As Global.System.Data.DataColumn
        
        Private columnPACIENTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Interpretacion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PED_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPED_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_HORAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_HORA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_INT_ALIMENTOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_INT_ALIMENTOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_INT_INHALANTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_INT_INHALANTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_INT_MED_AINESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_INT_MED_AINES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_INT_MED_ABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_INT_MED_AB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_INT_MED_OTRASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_INT_MED_OTRAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_INT_RECOMEN1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_INT_RECOMEN1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_INT_RECOMEN2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_INT_RECOMEN2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRCC_INT_SUSTANCIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCC_INT_SUSTANCIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIS_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIS_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PACIENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPACIENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As InterpretacionRow
            Get
                Return CType(Me.Rows(index),InterpretacionRow)
            End Get
        End Property
        
        Public Event InterpretacionRowChanging As InterpretacionRowChangeEventHandler
        
        Public Event InterpretacionRowChanged As InterpretacionRowChangeEventHandler
        
        Public Event InterpretacionRowDeleting As InterpretacionRowChangeEventHandler
        
        Public Event InterpretacionRowDeleted As InterpretacionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddInterpretacionRow(ByVal row As InterpretacionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInterpretacionRow(ByVal PED_ID As Integer, ByVal PRCC_FECHA As Date, ByVal PRCC_HORA As String, ByVal PRCC_INT_ALIMENTOS As String, ByVal PRCC_INT_INHALANTES As String, ByVal PRCC_INT_MED_AINES As String, ByVal PRCC_INT_MED_AB As String, ByVal PRCC_INT_MED_OTRAS As String, ByVal PRCC_INT_RECOMEN1 As String, ByVal PRCC_INT_RECOMEN2 As String, ByVal PRCC_INT_SUSTANCIAS As String, ByVal LIS_USER As Integer, ByVal PACIENTE As String) As InterpretacionRow
            Dim rowInterpretacionRow As InterpretacionRow = CType(Me.NewRow,InterpretacionRow)
            Dim columnValuesArray() As Object = New Object() {PED_ID, PRCC_FECHA, PRCC_HORA, PRCC_INT_ALIMENTOS, PRCC_INT_INHALANTES, PRCC_INT_MED_AINES, PRCC_INT_MED_AB, PRCC_INT_MED_OTRAS, PRCC_INT_RECOMEN1, PRCC_INT_RECOMEN2, PRCC_INT_SUSTANCIAS, LIS_USER, PACIENTE}
            rowInterpretacionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowInterpretacionRow)
            Return rowInterpretacionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As InterpretacionDataTable = CType(MyBase.Clone,InterpretacionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New InterpretacionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPED_ID = MyBase.Columns("PED_ID")
            Me.columnPRCC_FECHA = MyBase.Columns("PRCC_FECHA")
            Me.columnPRCC_HORA = MyBase.Columns("PRCC_HORA")
            Me.columnPRCC_INT_ALIMENTOS = MyBase.Columns("PRCC_INT_ALIMENTOS")
            Me.columnPRCC_INT_INHALANTES = MyBase.Columns("PRCC_INT_INHALANTES")
            Me.columnPRCC_INT_MED_AINES = MyBase.Columns("PRCC_INT_MED_AINES")
            Me.columnPRCC_INT_MED_AB = MyBase.Columns("PRCC_INT_MED_AB")
            Me.columnPRCC_INT_MED_OTRAS = MyBase.Columns("PRCC_INT_MED_OTRAS")
            Me.columnPRCC_INT_RECOMEN1 = MyBase.Columns("PRCC_INT_RECOMEN1")
            Me.columnPRCC_INT_RECOMEN2 = MyBase.Columns("PRCC_INT_RECOMEN2")
            Me.columnPRCC_INT_SUSTANCIAS = MyBase.Columns("PRCC_INT_SUSTANCIAS")
            Me.columnLIS_USER = MyBase.Columns("LIS_USER")
            Me.columnPACIENTE = MyBase.Columns("PACIENTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPED_ID = New Global.System.Data.DataColumn("PED_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPED_ID)
            Me.columnPRCC_FECHA = New Global.System.Data.DataColumn("PRCC_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_FECHA)
            Me.columnPRCC_HORA = New Global.System.Data.DataColumn("PRCC_HORA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_HORA)
            Me.columnPRCC_INT_ALIMENTOS = New Global.System.Data.DataColumn("PRCC_INT_ALIMENTOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_INT_ALIMENTOS)
            Me.columnPRCC_INT_INHALANTES = New Global.System.Data.DataColumn("PRCC_INT_INHALANTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_INT_INHALANTES)
            Me.columnPRCC_INT_MED_AINES = New Global.System.Data.DataColumn("PRCC_INT_MED_AINES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_INT_MED_AINES)
            Me.columnPRCC_INT_MED_AB = New Global.System.Data.DataColumn("PRCC_INT_MED_AB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_INT_MED_AB)
            Me.columnPRCC_INT_MED_OTRAS = New Global.System.Data.DataColumn("PRCC_INT_MED_OTRAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_INT_MED_OTRAS)
            Me.columnPRCC_INT_RECOMEN1 = New Global.System.Data.DataColumn("PRCC_INT_RECOMEN1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_INT_RECOMEN1)
            Me.columnPRCC_INT_RECOMEN2 = New Global.System.Data.DataColumn("PRCC_INT_RECOMEN2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_INT_RECOMEN2)
            Me.columnPRCC_INT_SUSTANCIAS = New Global.System.Data.DataColumn("PRCC_INT_SUSTANCIAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCC_INT_SUSTANCIAS)
            Me.columnLIS_USER = New Global.System.Data.DataColumn("LIS_USER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIS_USER)
            Me.columnPACIENTE = New Global.System.Data.DataColumn("PACIENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPACIENTE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewInterpretacionRow() As InterpretacionRow
            Return CType(Me.NewRow,InterpretacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New InterpretacionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(InterpretacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InterpretacionRowChangedEvent) Is Nothing) Then
                RaiseEvent InterpretacionRowChanged(Me, New InterpretacionRowChangeEvent(CType(e.Row,InterpretacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InterpretacionRowChangingEvent) Is Nothing) Then
                RaiseEvent InterpretacionRowChanging(Me, New InterpretacionRowChangeEvent(CType(e.Row,InterpretacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InterpretacionRowDeletedEvent) Is Nothing) Then
                RaiseEvent InterpretacionRowDeleted(Me, New InterpretacionRowChangeEvent(CType(e.Row,InterpretacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InterpretacionRowDeletingEvent) Is Nothing) Then
                RaiseEvent InterpretacionRowDeleting(Me, New InterpretacionRowChangeEvent(CType(e.Row,InterpretacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveInterpretacionRow(ByVal row As InterpretacionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dts_interpretacion = New dts_interpretacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "InterpretacionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class InterpretacionRow
        Inherits Global.System.Data.DataRow
        
        Private tableInterpretacion As InterpretacionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableInterpretacion = CType(Me.Table,InterpretacionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PED_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PED_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PED_ID' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PED_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_FECHA' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_HORA() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_HORAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_HORA' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_HORAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_INT_ALIMENTOS() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_INT_ALIMENTOSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_INT_ALIMENTOS' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_INT_ALIMENTOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_INT_INHALANTES() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_INT_INHALANTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_INT_INHALANTES' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_INT_INHALANTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_INT_MED_AINES() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_INT_MED_AINESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_INT_MED_AINES' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_INT_MED_AINESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_INT_MED_AB() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_INT_MED_ABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_INT_MED_AB' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_INT_MED_ABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_INT_MED_OTRAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_INT_MED_OTRASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_INT_MED_OTRAS' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_INT_MED_OTRASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_INT_RECOMEN1() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_INT_RECOMEN1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_INT_RECOMEN1' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_INT_RECOMEN1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_INT_RECOMEN2() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_INT_RECOMEN2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_INT_RECOMEN2' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_INT_RECOMEN2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRCC_INT_SUSTANCIAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PRCC_INT_SUSTANCIASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRCC_INT_SUSTANCIAS' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PRCC_INT_SUSTANCIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIS_USER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.LIS_USERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIS_USER' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.LIS_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PACIENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableInterpretacion.PACIENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PACIENTE' in table 'Interpretacion' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInterpretacion.PACIENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPED_IDNull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PED_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPED_IDNull()
            Me(Me.tableInterpretacion.PED_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_FECHANull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_FECHANull()
            Me(Me.tableInterpretacion.PRCC_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_HORANull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_HORAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_HORANull()
            Me(Me.tableInterpretacion.PRCC_HORAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_INT_ALIMENTOSNull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_INT_ALIMENTOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_INT_ALIMENTOSNull()
            Me(Me.tableInterpretacion.PRCC_INT_ALIMENTOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_INT_INHALANTESNull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_INT_INHALANTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_INT_INHALANTESNull()
            Me(Me.tableInterpretacion.PRCC_INT_INHALANTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_INT_MED_AINESNull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_INT_MED_AINESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_INT_MED_AINESNull()
            Me(Me.tableInterpretacion.PRCC_INT_MED_AINESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_INT_MED_ABNull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_INT_MED_ABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_INT_MED_ABNull()
            Me(Me.tableInterpretacion.PRCC_INT_MED_ABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_INT_MED_OTRASNull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_INT_MED_OTRASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_INT_MED_OTRASNull()
            Me(Me.tableInterpretacion.PRCC_INT_MED_OTRASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_INT_RECOMEN1Null() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_INT_RECOMEN1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_INT_RECOMEN1Null()
            Me(Me.tableInterpretacion.PRCC_INT_RECOMEN1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_INT_RECOMEN2Null() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_INT_RECOMEN2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_INT_RECOMEN2Null()
            Me(Me.tableInterpretacion.PRCC_INT_RECOMEN2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRCC_INT_SUSTANCIASNull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PRCC_INT_SUSTANCIASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRCC_INT_SUSTANCIASNull()
            Me(Me.tableInterpretacion.PRCC_INT_SUSTANCIASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIS_USERNull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.LIS_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIS_USERNull()
            Me(Me.tableInterpretacion.LIS_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPACIENTENull() As Boolean
            Return Me.IsNull(Me.tableInterpretacion.PACIENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPACIENTENull()
            Me(Me.tableInterpretacion.PACIENTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class InterpretacionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As InterpretacionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As InterpretacionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As InterpretacionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
