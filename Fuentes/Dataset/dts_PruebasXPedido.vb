'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dts_PruebasXPedido
    Inherits DataSet
    
    Private tablePRUEBASXPEDIDO As PRUEBASXPEDIDODataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PRUEBASXPEDIDO")) Is Nothing) Then
                Me.Tables.Add(New PRUEBASXPEDIDODataTable(ds.Tables("PRUEBASXPEDIDO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRUEBASXPEDIDO As PRUEBASXPEDIDODataTable
        Get
            Return Me.tablePRUEBASXPEDIDO
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dts_PruebasXPedido = CType(MyBase.Clone,dts_PruebasXPedido)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PRUEBASXPEDIDO")) Is Nothing) Then
            Me.Tables.Add(New PRUEBASXPEDIDODataTable(ds.Tables("PRUEBASXPEDIDO")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePRUEBASXPEDIDO = CType(Me.Tables("PRUEBASXPEDIDO"),PRUEBASXPEDIDODataTable)
        If (Not (Me.tablePRUEBASXPEDIDO) Is Nothing) Then
            Me.tablePRUEBASXPEDIDO.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dts_PruebasXPedido"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dts_PruebasXPedido.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePRUEBASXPEDIDO = New PRUEBASXPEDIDODataTable
        Me.Tables.Add(Me.tablePRUEBASXPEDIDO)
    End Sub
    
    Private Function ShouldSerializePRUEBASXPEDIDO() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PRUEBASXPEDIDORowChangeEventHandler(ByVal sender As Object, ByVal e As PRUEBASXPEDIDORowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRUEBASXPEDIDODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPEDIDO As DataColumn
        
        Private columnFECHA As DataColumn
        
        Private columnNOMBRE As DataColumn
        
        Private columnTEST As DataColumn
        
        Private columnPRUEBAS As DataColumn
        
        Private columnFEC_INI As DataColumn
        
        Private columnFEC_FIN As DataColumn
        
        Friend Sub New()
            MyBase.New("PRUEBASXPEDIDO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PEDIDOColumn As DataColumn
            Get
                Return Me.columnPEDIDO
            End Get
        End Property
        
        Friend ReadOnly Property FECHAColumn As DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        Friend ReadOnly Property NOMBREColumn As DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        Friend ReadOnly Property TESTColumn As DataColumn
            Get
                Return Me.columnTEST
            End Get
        End Property
        
        Friend ReadOnly Property PRUEBASColumn As DataColumn
            Get
                Return Me.columnPRUEBAS
            End Get
        End Property
        
        Friend ReadOnly Property FEC_INIColumn As DataColumn
            Get
                Return Me.columnFEC_INI
            End Get
        End Property
        
        Friend ReadOnly Property FEC_FINColumn As DataColumn
            Get
                Return Me.columnFEC_FIN
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRUEBASXPEDIDORow
            Get
                Return CType(Me.Rows(index),PRUEBASXPEDIDORow)
            End Get
        End Property
        
        Public Event PRUEBASXPEDIDORowChanged As PRUEBASXPEDIDORowChangeEventHandler
        
        Public Event PRUEBASXPEDIDORowChanging As PRUEBASXPEDIDORowChangeEventHandler
        
        Public Event PRUEBASXPEDIDORowDeleted As PRUEBASXPEDIDORowChangeEventHandler
        
        Public Event PRUEBASXPEDIDORowDeleting As PRUEBASXPEDIDORowChangeEventHandler
        
        Public Overloads Sub AddPRUEBASXPEDIDORow(ByVal row As PRUEBASXPEDIDORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPRUEBASXPEDIDORow(ByVal PEDIDO As Long, ByVal FECHA As Date, ByVal NOMBRE As String, ByVal TEST As String, ByVal PRUEBAS As Integer, ByVal FEC_INI As Date, ByVal FEC_FIN As Date) As PRUEBASXPEDIDORow
            Dim rowPRUEBASXPEDIDORow As PRUEBASXPEDIDORow = CType(Me.NewRow,PRUEBASXPEDIDORow)
            rowPRUEBASXPEDIDORow.ItemArray = New Object() {PEDIDO, FECHA, NOMBRE, TEST, PRUEBAS, FEC_INI, FEC_FIN}
            Me.Rows.Add(rowPRUEBASXPEDIDORow)
            Return rowPRUEBASXPEDIDORow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PRUEBASXPEDIDODataTable = CType(MyBase.Clone,PRUEBASXPEDIDODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PRUEBASXPEDIDODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPEDIDO = Me.Columns("PEDIDO")
            Me.columnFECHA = Me.Columns("FECHA")
            Me.columnNOMBRE = Me.Columns("NOMBRE")
            Me.columnTEST = Me.Columns("TEST")
            Me.columnPRUEBAS = Me.Columns("PRUEBAS")
            Me.columnFEC_INI = Me.Columns("FEC_INI")
            Me.columnFEC_FIN = Me.Columns("FEC_FIN")
        End Sub
        
        Private Sub InitClass()
            Me.columnPEDIDO = New DataColumn("PEDIDO", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPEDIDO)
            Me.columnFECHA = New DataColumn("FECHA", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFECHA)
            Me.columnNOMBRE = New DataColumn("NOMBRE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOMBRE)
            Me.columnTEST = New DataColumn("TEST", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTEST)
            Me.columnPRUEBAS = New DataColumn("PRUEBAS", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRUEBAS)
            Me.columnFEC_INI = New DataColumn("FEC_INI", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFEC_INI)
            Me.columnFEC_FIN = New DataColumn("FEC_FIN", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFEC_FIN)
        End Sub
        
        Public Function NewPRUEBASXPEDIDORow() As PRUEBASXPEDIDORow
            Return CType(Me.NewRow,PRUEBASXPEDIDORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PRUEBASXPEDIDORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRUEBASXPEDIDORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRUEBASXPEDIDORowChangedEvent) Is Nothing) Then
                RaiseEvent PRUEBASXPEDIDORowChanged(Me, New PRUEBASXPEDIDORowChangeEvent(CType(e.Row,PRUEBASXPEDIDORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRUEBASXPEDIDORowChangingEvent) Is Nothing) Then
                RaiseEvent PRUEBASXPEDIDORowChanging(Me, New PRUEBASXPEDIDORowChangeEvent(CType(e.Row,PRUEBASXPEDIDORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRUEBASXPEDIDORowDeletedEvent) Is Nothing) Then
                RaiseEvent PRUEBASXPEDIDORowDeleted(Me, New PRUEBASXPEDIDORowChangeEvent(CType(e.Row,PRUEBASXPEDIDORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRUEBASXPEDIDORowDeletingEvent) Is Nothing) Then
                RaiseEvent PRUEBASXPEDIDORowDeleting(Me, New PRUEBASXPEDIDORowChangeEvent(CType(e.Row,PRUEBASXPEDIDORow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePRUEBASXPEDIDORow(ByVal row As PRUEBASXPEDIDORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRUEBASXPEDIDORow
        Inherits DataRow
        
        Private tablePRUEBASXPEDIDO As PRUEBASXPEDIDODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRUEBASXPEDIDO = CType(Me.Table,PRUEBASXPEDIDODataTable)
        End Sub
        
        Public Property PEDIDO As Long
            Get
                Try 
                    Return CType(Me(Me.tablePRUEBASXPEDIDO.PEDIDOColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRUEBASXPEDIDO.PEDIDOColumn) = value
            End Set
        End Property
        
        Public Property FECHA As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRUEBASXPEDIDO.FECHAColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRUEBASXPEDIDO.FECHAColumn) = value
            End Set
        End Property
        
        Public Property NOMBRE As String
            Get
                Try 
                    Return CType(Me(Me.tablePRUEBASXPEDIDO.NOMBREColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRUEBASXPEDIDO.NOMBREColumn) = value
            End Set
        End Property
        
        Public Property TEST As String
            Get
                Try 
                    Return CType(Me(Me.tablePRUEBASXPEDIDO.TESTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRUEBASXPEDIDO.TESTColumn) = value
            End Set
        End Property
        
        Public Property PRUEBAS As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRUEBASXPEDIDO.PRUEBASColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRUEBASXPEDIDO.PRUEBASColumn) = value
            End Set
        End Property
        
        Public Property FEC_INI As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRUEBASXPEDIDO.FEC_INIColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRUEBASXPEDIDO.FEC_INIColumn) = value
            End Set
        End Property
        
        Public Property FEC_FIN As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRUEBASXPEDIDO.FEC_FINColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRUEBASXPEDIDO.FEC_FINColumn) = value
            End Set
        End Property
        
        Public Function IsPEDIDONull() As Boolean
            Return Me.IsNull(Me.tablePRUEBASXPEDIDO.PEDIDOColumn)
        End Function
        
        Public Sub SetPEDIDONull()
            Me(Me.tablePRUEBASXPEDIDO.PEDIDOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tablePRUEBASXPEDIDO.FECHAColumn)
        End Function
        
        Public Sub SetFECHANull()
            Me(Me.tablePRUEBASXPEDIDO.FECHAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOMBRENull() As Boolean
            Return Me.IsNull(Me.tablePRUEBASXPEDIDO.NOMBREColumn)
        End Function
        
        Public Sub SetNOMBRENull()
            Me(Me.tablePRUEBASXPEDIDO.NOMBREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTESTNull() As Boolean
            Return Me.IsNull(Me.tablePRUEBASXPEDIDO.TESTColumn)
        End Function
        
        Public Sub SetTESTNull()
            Me(Me.tablePRUEBASXPEDIDO.TESTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRUEBASNull() As Boolean
            Return Me.IsNull(Me.tablePRUEBASXPEDIDO.PRUEBASColumn)
        End Function
        
        Public Sub SetPRUEBASNull()
            Me(Me.tablePRUEBASXPEDIDO.PRUEBASColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFEC_ININull() As Boolean
            Return Me.IsNull(Me.tablePRUEBASXPEDIDO.FEC_INIColumn)
        End Function
        
        Public Sub SetFEC_ININull()
            Me(Me.tablePRUEBASXPEDIDO.FEC_INIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFEC_FINNull() As Boolean
            Return Me.IsNull(Me.tablePRUEBASXPEDIDO.FEC_FINColumn)
        End Function
        
        Public Sub SetFEC_FINNull()
            Me(Me.tablePRUEBASXPEDIDO.FEC_FINColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRUEBASXPEDIDORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PRUEBASXPEDIDORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PRUEBASXPEDIDORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PRUEBASXPEDIDORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
