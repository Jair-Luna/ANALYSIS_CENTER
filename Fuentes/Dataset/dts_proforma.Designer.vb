'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.9148
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dts_proforma"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dts_proforma
    Inherits Global.System.Data.DataSet
    
    Private tablePROFORMA As PROFORMADataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PROFORMA")) Is Nothing) Then
                MyBase.Tables.Add(New PROFORMADataTable(ds.Tables("PROFORMA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROFORMA() As PROFORMADataTable
        Get
            Return Me.tablePROFORMA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dts_proforma = CType(MyBase.Clone,dts_proforma)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PROFORMA")) Is Nothing) Then
                MyBase.Tables.Add(New PROFORMADataTable(ds.Tables("PROFORMA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePROFORMA = CType(MyBase.Tables("PROFORMA"),PROFORMADataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROFORMA) Is Nothing) Then
                Me.tablePROFORMA.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dts_proforma"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dts_proforma.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePROFORMA = New PROFORMADataTable
        MyBase.Tables.Add(Me.tablePROFORMA)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePROFORMA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dts_proforma = New dts_proforma
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PROFORMARowChangeEventHandler(ByVal sender As Object, ByVal e As PROFORMARowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROFORMADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnped_id As Global.System.Data.DataColumn
        
        Private columnped_fecing As Global.System.Data.DataColumn
        
        Private columnped_medicacion As Global.System.Data.DataColumn
        
        Private columnped_antecedente As Global.System.Data.DataColumn
        
        Private columnped_tipo As Global.System.Data.DataColumn
        
        Private columnpac_apellido As Global.System.Data.DataColumn
        
        Private columnpac_doc As Global.System.Data.DataColumn
        
        Private columnpac_nombre As Global.System.Data.DataColumn
        
        Private columnpac_direccion As Global.System.Data.DataColumn
        
        Private columnpac_fono As Global.System.Data.DataColumn
        
        Private columnmed_nomnbre As Global.System.Data.DataColumn
        
        Private columncon_nombre As Global.System.Data.DataColumn
        
        Private columnlab_nombre As Global.System.Data.DataColumn
        
        Private columnpee_cantidad As Global.System.Data.DataColumn
        
        Private columnprueba As Global.System.Data.DataColumn
        
        Private columnlip_precio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROFORMA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ped_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnped_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ped_fecingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnped_fecing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ped_medicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnped_medicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ped_antecedenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnped_antecedente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ped_tipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnped_tipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pac_apellidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpac_apellido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pac_docColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpac_doc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pac_nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpac_nombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pac_direccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpac_direccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pac_fonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpac_fono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property med_nomnbreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmed_nomnbre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property con_nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncon_nombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_nombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pee_cantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpee_cantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pruebaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprueba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lip_precioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlip_precio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROFORMARow
            Get
                Return CType(Me.Rows(index),PROFORMARow)
            End Get
        End Property
        
        Public Event PROFORMARowChanging As PROFORMARowChangeEventHandler
        
        Public Event PROFORMARowChanged As PROFORMARowChangeEventHandler
        
        Public Event PROFORMARowDeleting As PROFORMARowChangeEventHandler
        
        Public Event PROFORMARowDeleted As PROFORMARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPROFORMARow(ByVal row As PROFORMARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPROFORMARow( _
                    ByVal ped_id As Integer,  _
                    ByVal ped_fecing As Date,  _
                    ByVal ped_medicacion As String,  _
                    ByVal ped_antecedente As String,  _
                    ByVal ped_tipo As String,  _
                    ByVal pac_apellido As String,  _
                    ByVal pac_doc As String,  _
                    ByVal pac_nombre As String,  _
                    ByVal pac_direccion As String,  _
                    ByVal pac_fono As String,  _
                    ByVal med_nomnbre As String,  _
                    ByVal con_nombre As String,  _
                    ByVal lab_nombre As String,  _
                    ByVal pee_cantidad As Integer,  _
                    ByVal prueba As String,  _
                    ByVal lip_precio As Integer) As PROFORMARow
            Dim rowPROFORMARow As PROFORMARow = CType(Me.NewRow,PROFORMARow)
            Dim columnValuesArray() As Object = New Object() {ped_id, ped_fecing, ped_medicacion, ped_antecedente, ped_tipo, pac_apellido, pac_doc, pac_nombre, pac_direccion, pac_fono, med_nomnbre, con_nombre, lab_nombre, pee_cantidad, prueba, lip_precio}
            rowPROFORMARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROFORMARow)
            Return rowPROFORMARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROFORMADataTable = CType(MyBase.Clone,PROFORMADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROFORMADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnped_id = MyBase.Columns("ped_id")
            Me.columnped_fecing = MyBase.Columns("ped_fecing")
            Me.columnped_medicacion = MyBase.Columns("ped_medicacion")
            Me.columnped_antecedente = MyBase.Columns("ped_antecedente")
            Me.columnped_tipo = MyBase.Columns("ped_tipo")
            Me.columnpac_apellido = MyBase.Columns("pac_apellido")
            Me.columnpac_doc = MyBase.Columns("pac_doc")
            Me.columnpac_nombre = MyBase.Columns("pac_nombre")
            Me.columnpac_direccion = MyBase.Columns("pac_direccion")
            Me.columnpac_fono = MyBase.Columns("pac_fono")
            Me.columnmed_nomnbre = MyBase.Columns("med_nomnbre")
            Me.columncon_nombre = MyBase.Columns("con_nombre")
            Me.columnlab_nombre = MyBase.Columns("lab_nombre")
            Me.columnpee_cantidad = MyBase.Columns("pee_cantidad")
            Me.columnprueba = MyBase.Columns("prueba")
            Me.columnlip_precio = MyBase.Columns("lip_precio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnped_id = New Global.System.Data.DataColumn("ped_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnped_id)
            Me.columnped_fecing = New Global.System.Data.DataColumn("ped_fecing", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnped_fecing)
            Me.columnped_medicacion = New Global.System.Data.DataColumn("ped_medicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnped_medicacion)
            Me.columnped_antecedente = New Global.System.Data.DataColumn("ped_antecedente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnped_antecedente)
            Me.columnped_tipo = New Global.System.Data.DataColumn("ped_tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnped_tipo)
            Me.columnpac_apellido = New Global.System.Data.DataColumn("pac_apellido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpac_apellido)
            Me.columnpac_doc = New Global.System.Data.DataColumn("pac_doc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpac_doc)
            Me.columnpac_nombre = New Global.System.Data.DataColumn("pac_nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpac_nombre)
            Me.columnpac_direccion = New Global.System.Data.DataColumn("pac_direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpac_direccion)
            Me.columnpac_fono = New Global.System.Data.DataColumn("pac_fono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpac_fono)
            Me.columnmed_nomnbre = New Global.System.Data.DataColumn("med_nomnbre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmed_nomnbre)
            Me.columncon_nombre = New Global.System.Data.DataColumn("con_nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncon_nombre)
            Me.columnlab_nombre = New Global.System.Data.DataColumn("lab_nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_nombre)
            Me.columnpee_cantidad = New Global.System.Data.DataColumn("pee_cantidad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpee_cantidad)
            Me.columnprueba = New Global.System.Data.DataColumn("prueba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprueba)
            Me.columnlip_precio = New Global.System.Data.DataColumn("lip_precio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlip_precio)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPROFORMARow() As PROFORMARow
            Return CType(Me.NewRow,PROFORMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROFORMARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROFORMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROFORMARowChangedEvent) Is Nothing) Then
                RaiseEvent PROFORMARowChanged(Me, New PROFORMARowChangeEvent(CType(e.Row,PROFORMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROFORMARowChangingEvent) Is Nothing) Then
                RaiseEvent PROFORMARowChanging(Me, New PROFORMARowChangeEvent(CType(e.Row,PROFORMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROFORMARowDeletedEvent) Is Nothing) Then
                RaiseEvent PROFORMARowDeleted(Me, New PROFORMARowChangeEvent(CType(e.Row,PROFORMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROFORMARowDeletingEvent) Is Nothing) Then
                RaiseEvent PROFORMARowDeleting(Me, New PROFORMARowChangeEvent(CType(e.Row,PROFORMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePROFORMARow(ByVal row As PROFORMARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dts_proforma = New dts_proforma
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROFORMADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PROFORMARow
        Inherits Global.System.Data.DataRow
        
        Private tablePROFORMA As PROFORMADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROFORMA = CType(Me.Table,PROFORMADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ped_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.ped_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ped_id' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.ped_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ped_fecing() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.ped_fecingColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ped_fecing' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.ped_fecingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ped_medicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.ped_medicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ped_medicacion' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.ped_medicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ped_antecedente() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.ped_antecedenteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ped_antecedente' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.ped_antecedenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ped_tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.ped_tipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ped_tipo' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.ped_tipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pac_apellido() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.pac_apellidoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pac_apellido' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.pac_apellidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pac_doc() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.pac_docColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pac_doc' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.pac_docColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pac_nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.pac_nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pac_nombre' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.pac_nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pac_direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.pac_direccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pac_direccion' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.pac_direccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pac_fono() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.pac_fonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pac_fono' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.pac_fonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property med_nomnbre() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.med_nomnbreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'med_nomnbre' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.med_nomnbreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property con_nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.con_nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'con_nombre' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.con_nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.lab_nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lab_nombre' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.lab_nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pee_cantidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.pee_cantidadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pee_cantidad' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.pee_cantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prueba() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.pruebaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'prueba' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.pruebaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lip_precio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROFORMA.lip_precioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'lip_precio' de la tabla 'PROFORMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFORMA.lip_precioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isped_idNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.ped_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setped_idNull()
            Me(Me.tablePROFORMA.ped_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isped_fecingNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.ped_fecingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setped_fecingNull()
            Me(Me.tablePROFORMA.ped_fecingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isped_medicacionNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.ped_medicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setped_medicacionNull()
            Me(Me.tablePROFORMA.ped_medicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isped_antecedenteNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.ped_antecedenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setped_antecedenteNull()
            Me(Me.tablePROFORMA.ped_antecedenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isped_tipoNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.ped_tipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setped_tipoNull()
            Me(Me.tablePROFORMA.ped_tipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispac_apellidoNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.pac_apellidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpac_apellidoNull()
            Me(Me.tablePROFORMA.pac_apellidoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispac_docNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.pac_docColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpac_docNull()
            Me(Me.tablePROFORMA.pac_docColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispac_nombreNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.pac_nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpac_nombreNull()
            Me(Me.tablePROFORMA.pac_nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispac_direccionNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.pac_direccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpac_direccionNull()
            Me(Me.tablePROFORMA.pac_direccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispac_fonoNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.pac_fonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpac_fonoNull()
            Me(Me.tablePROFORMA.pac_fonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismed_nomnbreNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.med_nomnbreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmed_nomnbreNull()
            Me(Me.tablePROFORMA.med_nomnbreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscon_nombreNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.con_nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcon_nombreNull()
            Me(Me.tablePROFORMA.con_nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_nombreNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.lab_nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_nombreNull()
            Me(Me.tablePROFORMA.lab_nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispee_cantidadNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.pee_cantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpee_cantidadNull()
            Me(Me.tablePROFORMA.pee_cantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspruebaNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.pruebaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpruebaNull()
            Me(Me.tablePROFORMA.pruebaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islip_precioNull() As Boolean
            Return Me.IsNull(Me.tablePROFORMA.lip_precioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlip_precioNull()
            Me(Me.tablePROFORMA.lip_precioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PROFORMARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROFORMARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PROFORMARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PROFORMARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
