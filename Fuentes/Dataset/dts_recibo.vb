'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dts_recibo
    Inherits DataSet
    
    Private tablerecibo As reciboDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("recibo")) Is Nothing) Then
                Me.Tables.Add(New reciboDataTable(ds.Tables("recibo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property recibo As reciboDataTable
        Get
            Return Me.tablerecibo
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dts_recibo = CType(MyBase.Clone,dts_recibo)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("recibo")) Is Nothing) Then
            Me.Tables.Add(New reciboDataTable(ds.Tables("recibo")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablerecibo = CType(Me.Tables("recibo"),reciboDataTable)
        If (Not (Me.tablerecibo) Is Nothing) Then
            Me.tablerecibo.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dts_recibo"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dts_recibo.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablerecibo = New reciboDataTable
        Me.Tables.Add(Me.tablerecibo)
    End Sub
    
    Private Function ShouldSerializerecibo() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub reciboRowChangeEventHandler(ByVal sender As Object, ByVal e As reciboRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class reciboDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnped_turno As DataColumn
        
        Private columnped_fecing As DataColumn
        
        Private columnped_antecedente As DataColumn
        
        Private columnpaciente As DataColumn
        
        Private columnpac_doc As DataColumn
        
        Private columnpac_hist_clinica As DataColumn
        
        Private columnped_servicio As DataColumn
        
        Private columncon_nombre As DataColumn
        
        Private columnpac_grado As DataColumn
        
        Private columnpac_parentesco As DataColumn
        
        Private columntes_id As DataColumn
        
        Private columntes_nombre As DataColumn
        
        Private columnlip_precio As DataColumn
        
        Friend Sub New()
            MyBase.New("recibo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ped_turnoColumn As DataColumn
            Get
                Return Me.columnped_turno
            End Get
        End Property
        
        Friend ReadOnly Property ped_fecingColumn As DataColumn
            Get
                Return Me.columnped_fecing
            End Get
        End Property
        
        Friend ReadOnly Property ped_antecedenteColumn As DataColumn
            Get
                Return Me.columnped_antecedente
            End Get
        End Property
        
        Friend ReadOnly Property pacienteColumn As DataColumn
            Get
                Return Me.columnpaciente
            End Get
        End Property
        
        Friend ReadOnly Property pac_docColumn As DataColumn
            Get
                Return Me.columnpac_doc
            End Get
        End Property
        
        Friend ReadOnly Property pac_hist_clinicaColumn As DataColumn
            Get
                Return Me.columnpac_hist_clinica
            End Get
        End Property
        
        Friend ReadOnly Property ped_servicioColumn As DataColumn
            Get
                Return Me.columnped_servicio
            End Get
        End Property
        
        Friend ReadOnly Property con_nombreColumn As DataColumn
            Get
                Return Me.columncon_nombre
            End Get
        End Property
        
        Friend ReadOnly Property pac_gradoColumn As DataColumn
            Get
                Return Me.columnpac_grado
            End Get
        End Property
        
        Friend ReadOnly Property pac_parentescoColumn As DataColumn
            Get
                Return Me.columnpac_parentesco
            End Get
        End Property
        
        Friend ReadOnly Property tes_idColumn As DataColumn
            Get
                Return Me.columntes_id
            End Get
        End Property
        
        Friend ReadOnly Property tes_nombreColumn As DataColumn
            Get
                Return Me.columntes_nombre
            End Get
        End Property
        
        Friend ReadOnly Property lip_precioColumn As DataColumn
            Get
                Return Me.columnlip_precio
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As reciboRow
            Get
                Return CType(Me.Rows(index),reciboRow)
            End Get
        End Property
        
        Public Event reciboRowChanged As reciboRowChangeEventHandler
        
        Public Event reciboRowChanging As reciboRowChangeEventHandler
        
        Public Event reciboRowDeleted As reciboRowChangeEventHandler
        
        Public Event reciboRowDeleting As reciboRowChangeEventHandler
        
        Public Overloads Sub AddreciboRow(ByVal row As reciboRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddreciboRow(ByVal ped_turno As Long, ByVal ped_fecing As Date, ByVal ped_antecedente As String, ByVal paciente As String, ByVal pac_doc As String, ByVal pac_hist_clinica As String, ByVal ped_servicio As String, ByVal con_nombre As String, ByVal pac_grado As String, ByVal pac_parentesco As String, ByVal tes_id As Long, ByVal tes_nombre As String, ByVal lip_precio As Double) As reciboRow
            Dim rowreciboRow As reciboRow = CType(Me.NewRow,reciboRow)
            rowreciboRow.ItemArray = New Object() {ped_turno, ped_fecing, ped_antecedente, paciente, pac_doc, pac_hist_clinica, ped_servicio, con_nombre, pac_grado, pac_parentesco, tes_id, tes_nombre, lip_precio}
            Me.Rows.Add(rowreciboRow)
            Return rowreciboRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As reciboDataTable = CType(MyBase.Clone,reciboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New reciboDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnped_turno = Me.Columns("ped_turno")
            Me.columnped_fecing = Me.Columns("ped_fecing")
            Me.columnped_antecedente = Me.Columns("ped_antecedente")
            Me.columnpaciente = Me.Columns("paciente")
            Me.columnpac_doc = Me.Columns("pac_doc")
            Me.columnpac_hist_clinica = Me.Columns("pac_hist_clinica")
            Me.columnped_servicio = Me.Columns("ped_servicio")
            Me.columncon_nombre = Me.Columns("con_nombre")
            Me.columnpac_grado = Me.Columns("pac_grado")
            Me.columnpac_parentesco = Me.Columns("pac_parentesco")
            Me.columntes_id = Me.Columns("tes_id")
            Me.columntes_nombre = Me.Columns("tes_nombre")
            Me.columnlip_precio = Me.Columns("lip_precio")
        End Sub
        
        Private Sub InitClass()
            Me.columnped_turno = New DataColumn("ped_turno", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnped_turno)
            Me.columnped_fecing = New DataColumn("ped_fecing", GetType(System.DateTime), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnped_fecing)
            Me.columnped_antecedente = New DataColumn("ped_antecedente", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnped_antecedente)
            Me.columnpaciente = New DataColumn("paciente", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnpaciente)
            Me.columnpac_doc = New DataColumn("pac_doc", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnpac_doc)
            Me.columnpac_hist_clinica = New DataColumn("pac_hist_clinica", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnpac_hist_clinica)
            Me.columnped_servicio = New DataColumn("ped_servicio", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnped_servicio)
            Me.columncon_nombre = New DataColumn("con_nombre", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columncon_nombre)
            Me.columnpac_grado = New DataColumn("pac_grado", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnpac_grado)
            Me.columnpac_parentesco = New DataColumn("pac_parentesco", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnpac_parentesco)
            Me.columntes_id = New DataColumn("tes_id", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columntes_id)
            Me.columntes_nombre = New DataColumn("tes_nombre", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columntes_nombre)
            Me.columnlip_precio = New DataColumn("lip_precio", GetType(System.Double), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnlip_precio)
            Me.columnped_turno.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columnped_fecing.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columnped_antecedente.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columnpaciente.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columnpac_doc.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columnpac_hist_clinica.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columnped_servicio.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columncon_nombre.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columnpac_grado.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columnpac_parentesco.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columntes_id.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columntes_nombre.Namespace = "http://tempuri.org/dts_recibo.xsd"
            Me.columnlip_precio.Namespace = "http://tempuri.org/dts_recibo.xsd"
        End Sub
        
        Public Function NewreciboRow() As reciboRow
            Return CType(Me.NewRow,reciboRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New reciboRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(reciboRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.reciboRowChangedEvent) Is Nothing) Then
                RaiseEvent reciboRowChanged(Me, New reciboRowChangeEvent(CType(e.Row,reciboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.reciboRowChangingEvent) Is Nothing) Then
                RaiseEvent reciboRowChanging(Me, New reciboRowChangeEvent(CType(e.Row,reciboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.reciboRowDeletedEvent) Is Nothing) Then
                RaiseEvent reciboRowDeleted(Me, New reciboRowChangeEvent(CType(e.Row,reciboRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.reciboRowDeletingEvent) Is Nothing) Then
                RaiseEvent reciboRowDeleting(Me, New reciboRowChangeEvent(CType(e.Row,reciboRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovereciboRow(ByVal row As reciboRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class reciboRow
        Inherits DataRow
        
        Private tablerecibo As reciboDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablerecibo = CType(Me.Table,reciboDataTable)
        End Sub
        
        Public Property ped_turno As Long
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.ped_turnoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.ped_turnoColumn) = value
            End Set
        End Property
        
        Public Property ped_fecing As Date
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.ped_fecingColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.ped_fecingColumn) = value
            End Set
        End Property
        
        Public Property ped_antecedente As String
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.ped_antecedenteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.ped_antecedenteColumn) = value
            End Set
        End Property
        
        Public Property paciente As String
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.pacienteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.pacienteColumn) = value
            End Set
        End Property
        
        Public Property pac_doc As String
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.pac_docColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.pac_docColumn) = value
            End Set
        End Property
        
        Public Property pac_hist_clinica As String
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.pac_hist_clinicaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.pac_hist_clinicaColumn) = value
            End Set
        End Property
        
        Public Property ped_servicio As String
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.ped_servicioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.ped_servicioColumn) = value
            End Set
        End Property
        
        Public Property con_nombre As String
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.con_nombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.con_nombreColumn) = value
            End Set
        End Property
        
        Public Property pac_grado As String
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.pac_gradoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.pac_gradoColumn) = value
            End Set
        End Property
        
        Public Property pac_parentesco As String
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.pac_parentescoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.pac_parentescoColumn) = value
            End Set
        End Property
        
        Public Property tes_id As Long
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.tes_idColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.tes_idColumn) = value
            End Set
        End Property
        
        Public Property tes_nombre As String
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.tes_nombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.tes_nombreColumn) = value
            End Set
        End Property
        
        Public Property lip_precio As Double
            Get
                Try 
                    Return CType(Me(Me.tablerecibo.lip_precioColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerecibo.lip_precioColumn) = value
            End Set
        End Property
        
        Public Function Isped_turnoNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.ped_turnoColumn)
        End Function
        
        Public Sub Setped_turnoNull()
            Me(Me.tablerecibo.ped_turnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isped_fecingNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.ped_fecingColumn)
        End Function
        
        Public Sub Setped_fecingNull()
            Me(Me.tablerecibo.ped_fecingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isped_antecedenteNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.ped_antecedenteColumn)
        End Function
        
        Public Sub Setped_antecedenteNull()
            Me(Me.tablerecibo.ped_antecedenteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspacienteNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.pacienteColumn)
        End Function
        
        Public Sub SetpacienteNull()
            Me(Me.tablerecibo.pacienteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispac_docNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.pac_docColumn)
        End Function
        
        Public Sub Setpac_docNull()
            Me(Me.tablerecibo.pac_docColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispac_hist_clinicaNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.pac_hist_clinicaColumn)
        End Function
        
        Public Sub Setpac_hist_clinicaNull()
            Me(Me.tablerecibo.pac_hist_clinicaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isped_servicioNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.ped_servicioColumn)
        End Function
        
        Public Sub Setped_servicioNull()
            Me(Me.tablerecibo.ped_servicioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscon_nombreNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.con_nombreColumn)
        End Function
        
        Public Sub Setcon_nombreNull()
            Me(Me.tablerecibo.con_nombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispac_gradoNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.pac_gradoColumn)
        End Function
        
        Public Sub Setpac_gradoNull()
            Me(Me.tablerecibo.pac_gradoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispac_parentescoNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.pac_parentescoColumn)
        End Function
        
        Public Sub Setpac_parentescoNull()
            Me(Me.tablerecibo.pac_parentescoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istes_idNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.tes_idColumn)
        End Function
        
        Public Sub Settes_idNull()
            Me(Me.tablerecibo.tes_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istes_nombreNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.tes_nombreColumn)
        End Function
        
        Public Sub Settes_nombreNull()
            Me(Me.tablerecibo.tes_nombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Islip_precioNull() As Boolean
            Return Me.IsNull(Me.tablerecibo.lip_precioColumn)
        End Function
        
        Public Sub Setlip_precioNull()
            Me(Me.tablerecibo.lip_precioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class reciboRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As reciboRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As reciboRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As reciboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
