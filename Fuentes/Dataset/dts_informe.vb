'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dts_informe
    Inherits DataSet
    
    Private tableINFORME As INFORMEDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("INFORME")) Is Nothing) Then
                Me.Tables.Add(New INFORMEDataTable(ds.Tables("INFORME")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INFORME As INFORMEDataTable
        Get
            Return Me.tableINFORME
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dts_informe = CType(MyBase.Clone,dts_informe)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("INFORME")) Is Nothing) Then
            Me.Tables.Add(New INFORMEDataTable(ds.Tables("INFORME")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableINFORME = CType(Me.Tables("INFORME"),INFORMEDataTable)
        If (Not (Me.tableINFORME) Is Nothing) Then
            Me.tableINFORME.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dts_informe"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dts_informe.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableINFORME = New INFORMEDataTable
        Me.Tables.Add(Me.tableINFORME)
    End Sub
    
    Private Function ShouldSerializeINFORME() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub INFORMERowChangeEventHandler(ByVal sender As Object, ByVal e As INFORMERowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INFORMEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFECHAI As DataColumn
        
        Private columnFECHAF As DataColumn
        
        Private columnPED_ID As DataColumn
        
        Private columnTES_ID As DataColumn
        
        Private columnPAC_ID As DataColumn
        
        Private columnARE_ID As DataColumn
        
        Private columnARE_NOMBRE As DataColumn
        
        Private columnPAC_OBS As DataColumn
        
        Private columnPAC_SEXO As DataColumn
        
        Private columnPAC_FECNAC As DataColumn
        
        Private columnPED_SERVICIO As DataColumn
        
        Friend Sub New()
            MyBase.New("INFORME")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FECHAIColumn As DataColumn
            Get
                Return Me.columnFECHAI
            End Get
        End Property
        
        Friend ReadOnly Property FECHAFColumn As DataColumn
            Get
                Return Me.columnFECHAF
            End Get
        End Property
        
        Friend ReadOnly Property PED_IDColumn As DataColumn
            Get
                Return Me.columnPED_ID
            End Get
        End Property
        
        Friend ReadOnly Property TES_IDColumn As DataColumn
            Get
                Return Me.columnTES_ID
            End Get
        End Property
        
        Friend ReadOnly Property PAC_IDColumn As DataColumn
            Get
                Return Me.columnPAC_ID
            End Get
        End Property
        
        Friend ReadOnly Property ARE_IDColumn As DataColumn
            Get
                Return Me.columnARE_ID
            End Get
        End Property
        
        Friend ReadOnly Property ARE_NOMBREColumn As DataColumn
            Get
                Return Me.columnARE_NOMBRE
            End Get
        End Property
        
        Friend ReadOnly Property PAC_OBSColumn As DataColumn
            Get
                Return Me.columnPAC_OBS
            End Get
        End Property
        
        Friend ReadOnly Property PAC_SEXOColumn As DataColumn
            Get
                Return Me.columnPAC_SEXO
            End Get
        End Property
        
        Friend ReadOnly Property PAC_FECNACColumn As DataColumn
            Get
                Return Me.columnPAC_FECNAC
            End Get
        End Property
        
        Friend ReadOnly Property PED_SERVICIOColumn As DataColumn
            Get
                Return Me.columnPED_SERVICIO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As INFORMERow
            Get
                Return CType(Me.Rows(index),INFORMERow)
            End Get
        End Property
        
        Public Event INFORMERowChanged As INFORMERowChangeEventHandler
        
        Public Event INFORMERowChanging As INFORMERowChangeEventHandler
        
        Public Event INFORMERowDeleted As INFORMERowChangeEventHandler
        
        Public Event INFORMERowDeleting As INFORMERowChangeEventHandler
        
        Public Overloads Sub AddINFORMERow(ByVal row As INFORMERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddINFORMERow(ByVal FECHAI As Date, ByVal FECHAF As Date, ByVal PED_ID As Integer, ByVal TES_ID As Integer, ByVal PAC_ID As Integer, ByVal ARE_ID As Integer, ByVal ARE_NOMBRE As String, ByVal PAC_OBS As String, ByVal PAC_SEXO As String, ByVal PAC_FECNAC As Date, ByVal PED_SERVICIO As String) As INFORMERow
            Dim rowINFORMERow As INFORMERow = CType(Me.NewRow,INFORMERow)
            rowINFORMERow.ItemArray = New Object() {FECHAI, FECHAF, PED_ID, TES_ID, PAC_ID, ARE_ID, ARE_NOMBRE, PAC_OBS, PAC_SEXO, PAC_FECNAC, PED_SERVICIO}
            Me.Rows.Add(rowINFORMERow)
            Return rowINFORMERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As INFORMEDataTable = CType(MyBase.Clone,INFORMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New INFORMEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFECHAI = Me.Columns("FECHAI")
            Me.columnFECHAF = Me.Columns("FECHAF")
            Me.columnPED_ID = Me.Columns("PED_ID")
            Me.columnTES_ID = Me.Columns("TES_ID")
            Me.columnPAC_ID = Me.Columns("PAC_ID")
            Me.columnARE_ID = Me.Columns("ARE_ID")
            Me.columnARE_NOMBRE = Me.Columns("ARE_NOMBRE")
            Me.columnPAC_OBS = Me.Columns("PAC_OBS")
            Me.columnPAC_SEXO = Me.Columns("PAC_SEXO")
            Me.columnPAC_FECNAC = Me.Columns("PAC_FECNAC")
            Me.columnPED_SERVICIO = Me.Columns("PED_SERVICIO")
        End Sub
        
        Private Sub InitClass()
            Me.columnFECHAI = New DataColumn("FECHAI", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFECHAI)
            Me.columnFECHAF = New DataColumn("FECHAF", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFECHAF)
            Me.columnPED_ID = New DataColumn("PED_ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPED_ID)
            Me.columnTES_ID = New DataColumn("TES_ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTES_ID)
            Me.columnPAC_ID = New DataColumn("PAC_ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAC_ID)
            Me.columnARE_ID = New DataColumn("ARE_ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARE_ID)
            Me.columnARE_NOMBRE = New DataColumn("ARE_NOMBRE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARE_NOMBRE)
            Me.columnPAC_OBS = New DataColumn("PAC_OBS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAC_OBS)
            Me.columnPAC_SEXO = New DataColumn("PAC_SEXO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAC_SEXO)
            Me.columnPAC_FECNAC = New DataColumn("PAC_FECNAC", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAC_FECNAC)
            Me.columnPED_SERVICIO = New DataColumn("PED_SERVICIO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPED_SERVICIO)
        End Sub
        
        Public Function NewINFORMERow() As INFORMERow
            Return CType(Me.NewRow,INFORMERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New INFORMERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(INFORMERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INFORMERowChangedEvent) Is Nothing) Then
                RaiseEvent INFORMERowChanged(Me, New INFORMERowChangeEvent(CType(e.Row,INFORMERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INFORMERowChangingEvent) Is Nothing) Then
                RaiseEvent INFORMERowChanging(Me, New INFORMERowChangeEvent(CType(e.Row,INFORMERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INFORMERowDeletedEvent) Is Nothing) Then
                RaiseEvent INFORMERowDeleted(Me, New INFORMERowChangeEvent(CType(e.Row,INFORMERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INFORMERowDeletingEvent) Is Nothing) Then
                RaiseEvent INFORMERowDeleting(Me, New INFORMERowChangeEvent(CType(e.Row,INFORMERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveINFORMERow(ByVal row As INFORMERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INFORMERow
        Inherits DataRow
        
        Private tableINFORME As INFORMEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableINFORME = CType(Me.Table,INFORMEDataTable)
        End Sub
        
        Public Property FECHAI As Date
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.FECHAIColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.FECHAIColumn) = value
            End Set
        End Property
        
        Public Property FECHAF As Date
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.FECHAFColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.FECHAFColumn) = value
            End Set
        End Property
        
        Public Property PED_ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.PED_IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.PED_IDColumn) = value
            End Set
        End Property
        
        Public Property TES_ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.TES_IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.TES_IDColumn) = value
            End Set
        End Property
        
        Public Property PAC_ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.PAC_IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.PAC_IDColumn) = value
            End Set
        End Property
        
        Public Property ARE_ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.ARE_IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.ARE_IDColumn) = value
            End Set
        End Property
        
        Public Property ARE_NOMBRE As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.ARE_NOMBREColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.ARE_NOMBREColumn) = value
            End Set
        End Property
        
        Public Property PAC_OBS As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.PAC_OBSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.PAC_OBSColumn) = value
            End Set
        End Property
        
        Public Property PAC_SEXO As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.PAC_SEXOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.PAC_SEXOColumn) = value
            End Set
        End Property
        
        Public Property PAC_FECNAC As Date
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.PAC_FECNACColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.PAC_FECNACColumn) = value
            End Set
        End Property
        
        Public Property PED_SERVICIO As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORME.PED_SERVICIOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORME.PED_SERVICIOColumn) = value
            End Set
        End Property
        
        Public Function IsFECHAINull() As Boolean
            Return Me.IsNull(Me.tableINFORME.FECHAIColumn)
        End Function
        
        Public Sub SetFECHAINull()
            Me(Me.tableINFORME.FECHAIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFECHAFNull() As Boolean
            Return Me.IsNull(Me.tableINFORME.FECHAFColumn)
        End Function
        
        Public Sub SetFECHAFNull()
            Me(Me.tableINFORME.FECHAFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPED_IDNull() As Boolean
            Return Me.IsNull(Me.tableINFORME.PED_IDColumn)
        End Function
        
        Public Sub SetPED_IDNull()
            Me(Me.tableINFORME.PED_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTES_IDNull() As Boolean
            Return Me.IsNull(Me.tableINFORME.TES_IDColumn)
        End Function
        
        Public Sub SetTES_IDNull()
            Me(Me.tableINFORME.TES_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAC_IDNull() As Boolean
            Return Me.IsNull(Me.tableINFORME.PAC_IDColumn)
        End Function
        
        Public Sub SetPAC_IDNull()
            Me(Me.tableINFORME.PAC_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARE_IDNull() As Boolean
            Return Me.IsNull(Me.tableINFORME.ARE_IDColumn)
        End Function
        
        Public Sub SetARE_IDNull()
            Me(Me.tableINFORME.ARE_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARE_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableINFORME.ARE_NOMBREColumn)
        End Function
        
        Public Sub SetARE_NOMBRENull()
            Me(Me.tableINFORME.ARE_NOMBREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAC_OBSNull() As Boolean
            Return Me.IsNull(Me.tableINFORME.PAC_OBSColumn)
        End Function
        
        Public Sub SetPAC_OBSNull()
            Me(Me.tableINFORME.PAC_OBSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAC_SEXONull() As Boolean
            Return Me.IsNull(Me.tableINFORME.PAC_SEXOColumn)
        End Function
        
        Public Sub SetPAC_SEXONull()
            Me(Me.tableINFORME.PAC_SEXOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAC_FECNACNull() As Boolean
            Return Me.IsNull(Me.tableINFORME.PAC_FECNACColumn)
        End Function
        
        Public Sub SetPAC_FECNACNull()
            Me(Me.tableINFORME.PAC_FECNACColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPED_SERVICIONull() As Boolean
            Return Me.IsNull(Me.tableINFORME.PED_SERVICIOColumn)
        End Function
        
        Public Sub SetPED_SERVICIONull()
            Me(Me.tableINFORME.PED_SERVICIOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INFORMERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As INFORMERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As INFORMERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As INFORMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
